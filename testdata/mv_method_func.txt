mv T.F TF
-- x.go --
package m

type T int

func (T) F(x int) int { return 1}

// uses
var _ = T.F(1,2)
var _ = T(1).F(2)
var _ = T.F
var _ = (*T).F(new(T), 2)
var _ = new(T).F(2)

//var _ = (*T).F
-- sub/sub.go --
package sub

import "m"

var x m.T
var _ = x.F(1)
-- stdout --
diff old/x.go new/x.go
--- old/x.go
+++ new/x.go
@@ -2,13 +2,13 @@

 type T int

-func (T) F(x int) int { return 1}
+func TF(_ T, x int) int { return 1 }

 // uses
-var _ = T.F(1,2)
-var _ = T(1).F(2)
-var _ = T.F
-var _ = (*T).F(new(T), 2)
-var _ = new(T).F(2)
+var _ = TF(1, 2)
+var _ = TF(T(1), 2)
+var _ = TF
+var _ = TF(*new(T), 2)
+var _ = TF(*new(T), 2)

 //var _ = (*T).F
diff old/sub/sub.go new/sub/sub.go
--- old/sub/sub.go
+++ new/sub/sub.go
@@ -3,4 +3,4 @@
 import "m"

 var x m.T
-var _ = x.F(1)
+var _ = m.TF(x, 1)
