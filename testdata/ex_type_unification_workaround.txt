# Demonstrate workaround for #6.
ex {
  type A interface{ Equal(A) bool }
  type B interface{ Equal(A) bool }
  type C interface{ Equal(A) bool }

  var b B
  var c C

  b == c -> b.Equal(c)
}
-- x.go --
package p

type I interface{ Equal(I) bool }
var i I

type V int
func (V) Equal(I) bool
var v V
var _ I = v

var _ = i == i
var _ = i == v
var _ = v == i
var _ = v == v

type J interface{ I; J() }
type K interface{ J; K() }
var j J
var k K

var _ = j == k

var x interface{ Equal(int) bool }
var _ = x == x

var y interface{ Equal(interface{}) bool }
var _ = y == y
-- stdout --
diff old/x.go new/x.go
--- old/x.go
+++ new/x.go
@@ -1,24 +1,34 @@
 package p

 type I interface{ Equal(I) bool }
+
 var i I

 type V int
+
 func (V) Equal(I) bool
+
 var v V
 var _ I = v

-var _ = i == i
-var _ = i == v
-var _ = v == i
-var _ = v == v
+var _ = i.Equal(i)
+var _ = i.Equal(v)
+var _ = v.Equal(i)
+var _ = v.Equal(v)
+
+type J interface {
+	I
+	J()
+}
+type K interface {
+	J
+	K()
+}

-type J interface{ I; J() }
-type K interface{ J; K() }
 var j J
 var k K

-var _ = j == k
+var _ = j.Equal(k)

 var x interface{ Equal(int) bool }
 var _ = x == x
